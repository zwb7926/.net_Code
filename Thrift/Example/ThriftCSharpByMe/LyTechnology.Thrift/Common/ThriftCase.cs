/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class ThriftCase
{
    public interface Iface
    {
        UserInfo GetUserInfo(int userId);
#if SILVERLIGHT
    IAsyncResult Begin_GetUserInfo(AsyncCallback callback, object state, int userId);
    UserInfo End_GetUserInfo(IAsyncResult asyncResult);
#endif
        bool InsertUserInfo(UserInfo userInfo);
#if SILVERLIGHT
    IAsyncResult Begin_InsertUserInfo(AsyncCallback callback, object state, UserInfo userInfo);
    bool End_InsertUserInfo(IAsyncResult asyncResult);
#endif
        int InsertUserInfo2(UserInfo userInfo);
#if SILVERLIGHT
    IAsyncResult Begin_InsertUserInfo2(AsyncCallback callback, object state, UserInfo userInfo);
    int End_InsertUserInfo2(IAsyncResult asyncResult);
#endif
        List<string> GetUserInfoTest(Dictionary<string, string> num1);
#if SILVERLIGHT
    IAsyncResult Begin_GetUserInfoTest(AsyncCallback callback, object state, Dictionary<string, string> num1);
    List<string> End_GetUserInfoTest(IAsyncResult asyncResult);
#endif
        List<UserInfo> GetUserInfoTest2(string userName);
#if SILVERLIGHT
    IAsyncResult Begin_GetUserInfoTest2(AsyncCallback callback, object state, string userName);
    List<UserInfo> End_GetUserInfoTest2(IAsyncResult asyncResult);
#endif
    }

    public class Client : IDisposable, Iface
    {
        public Client(TProtocol prot)
            : this(prot, prot)
        {
        }

        public Client(TProtocol iprot, TProtocol oprot)
        {
            iprot_ = iprot;
            oprot_ = oprot;
        }

        protected TProtocol iprot_;
        protected TProtocol oprot_;
        protected int seqid_;

        public TProtocol InputProtocol
        {
            get { return iprot_; }
        }
        public TProtocol OutputProtocol
        {
            get { return oprot_; }
        }


        #region " IDisposable Support "
        private bool _IsDisposed;

        // IDisposable
        public void Dispose()
        {
            Dispose(true);
        }


        protected virtual void Dispose(bool disposing)
        {
            if (!_IsDisposed)
            {
                if (disposing)
                {
                    if (iprot_ != null)
                    {
                        ((IDisposable)iprot_).Dispose();
                    }
                    if (oprot_ != null)
                    {
                        ((IDisposable)oprot_).Dispose();
                    }
                }
            }
            _IsDisposed = true;
        }
        #endregion



#if SILVERLIGHT
    public IAsyncResult Begin_GetUserInfo(AsyncCallback callback, object state, int userId)
    {
      return send_GetUserInfo(callback, state, userId);
    }

    public UserInfo End_GetUserInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GetUserInfo();
    }

#endif

        public UserInfo GetUserInfo(int userId)
        {
#if !SILVERLIGHT
            send_GetUserInfo(userId);
            return recv_GetUserInfo();

#else
      var asyncResult = Begin_GetUserInfo(null, null, userId);
      return End_GetUserInfo(asyncResult);

#endif
        }
#if SILVERLIGHT
    public IAsyncResult send_GetUserInfo(AsyncCallback callback, object state, int userId)
#else
        public void send_GetUserInfo(int userId)
#endif
        {
            oprot_.WriteMessageBegin(new TMessage("GetUserInfo", TMessageType.Call, seqid_));
            GetUserInfo_args args = new GetUserInfo_args();
            args.UserId = userId;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
#if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
#else
            oprot_.Transport.Flush();
#endif
        }

        public UserInfo recv_GetUserInfo()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            GetUserInfo_result result = new GetUserInfo_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetUserInfo failed: unknown result");
        }


#if SILVERLIGHT
    public IAsyncResult Begin_InsertUserInfo(AsyncCallback callback, object state, UserInfo userInfo)
    {
      return send_InsertUserInfo(callback, state, userInfo);
    }

    public bool End_InsertUserInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_InsertUserInfo();
    }

#endif

        public bool InsertUserInfo(UserInfo userInfo)
        {
#if !SILVERLIGHT
            send_InsertUserInfo(userInfo);
            return recv_InsertUserInfo();

#else
      var asyncResult = Begin_InsertUserInfo(null, null, userInfo);
      return End_InsertUserInfo(asyncResult);

#endif
        }
#if SILVERLIGHT
    public IAsyncResult send_InsertUserInfo(AsyncCallback callback, object state, UserInfo userInfo)
#else
        public void send_InsertUserInfo(UserInfo userInfo)
#endif
        {
            oprot_.WriteMessageBegin(new TMessage("InsertUserInfo", TMessageType.Call, seqid_));
            InsertUserInfo_args args = new InsertUserInfo_args();
            args.UserInfo = userInfo;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
#if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
#else
            oprot_.Transport.Flush();
#endif
        }

        public bool recv_InsertUserInfo()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            InsertUserInfo_result result = new InsertUserInfo_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "InsertUserInfo failed: unknown result");
        }


#if SILVERLIGHT
    public IAsyncResult Begin_InsertUserInfo2(AsyncCallback callback, object state, UserInfo userInfo)
    {
      return send_InsertUserInfo2(callback, state, userInfo);
    }

    public int End_InsertUserInfo2(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_InsertUserInfo2();
    }

#endif

        public int InsertUserInfo2(UserInfo userInfo)
        {
#if !SILVERLIGHT
            send_InsertUserInfo2(userInfo);
            return recv_InsertUserInfo2();

#else
      var asyncResult = Begin_InsertUserInfo2(null, null, userInfo);
      return End_InsertUserInfo2(asyncResult);

#endif
        }
#if SILVERLIGHT
    public IAsyncResult send_InsertUserInfo2(AsyncCallback callback, object state, UserInfo userInfo)
#else
        public void send_InsertUserInfo2(UserInfo userInfo)
#endif
        {
            oprot_.WriteMessageBegin(new TMessage("InsertUserInfo2", TMessageType.Call, seqid_));
            InsertUserInfo2_args args = new InsertUserInfo2_args();
            args.UserInfo = userInfo;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
#if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
#else
            oprot_.Transport.Flush();
#endif
        }

        public int recv_InsertUserInfo2()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            InsertUserInfo2_result result = new InsertUserInfo2_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "InsertUserInfo2 failed: unknown result");
        }


#if SILVERLIGHT
    public IAsyncResult Begin_GetUserInfoTest(AsyncCallback callback, object state, Dictionary<string, string> num1)
    {
      return send_GetUserInfoTest(callback, state, num1);
    }

    public List<string> End_GetUserInfoTest(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GetUserInfoTest();
    }

#endif

        public List<string> GetUserInfoTest(Dictionary<string, string> num1)
        {
#if !SILVERLIGHT
            send_GetUserInfoTest(num1);
            return recv_GetUserInfoTest();

#else
      var asyncResult = Begin_GetUserInfoTest(null, null, num1);
      return End_GetUserInfoTest(asyncResult);

#endif
        }
#if SILVERLIGHT
    public IAsyncResult send_GetUserInfoTest(AsyncCallback callback, object state, Dictionary<string, string> num1)
#else
        public void send_GetUserInfoTest(Dictionary<string, string> num1)
#endif
        {
            oprot_.WriteMessageBegin(new TMessage("GetUserInfoTest", TMessageType.Call, seqid_));
            GetUserInfoTest_args args = new GetUserInfoTest_args();
            args.Num1 = num1;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
#if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
#else
            oprot_.Transport.Flush();
#endif
        }

        public List<string> recv_GetUserInfoTest()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            GetUserInfoTest_result result = new GetUserInfoTest_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetUserInfoTest failed: unknown result");
        }


#if SILVERLIGHT
    public IAsyncResult Begin_GetUserInfoTest2(AsyncCallback callback, object state, string userName)
    {
      return send_GetUserInfoTest2(callback, state, userName);
    }

    public List<UserInfo> End_GetUserInfoTest2(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GetUserInfoTest2();
    }

#endif

        public List<UserInfo> GetUserInfoTest2(string userName)
        {
#if !SILVERLIGHT
            send_GetUserInfoTest2(userName);
            return recv_GetUserInfoTest2();

#else
      var asyncResult = Begin_GetUserInfoTest2(null, null, userName);
      return End_GetUserInfoTest2(asyncResult);

#endif
        }
#if SILVERLIGHT
    public IAsyncResult send_GetUserInfoTest2(AsyncCallback callback, object state, string userName)
#else
        public void send_GetUserInfoTest2(string userName)
#endif
        {
            oprot_.WriteMessageBegin(new TMessage("GetUserInfoTest2", TMessageType.Call, seqid_));
            GetUserInfoTest2_args args = new GetUserInfoTest2_args();
            args.UserName = userName;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
#if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
#else
            oprot_.Transport.Flush();
#endif
        }

        public List<UserInfo> recv_GetUserInfoTest2()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            GetUserInfoTest2_result result = new GetUserInfoTest2_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetUserInfoTest2 failed: unknown result");
        }

    }
    public class Processor : TProcessor
    {
        public Processor(Iface iface)
        {
            iface_ = iface;
            processMap_["GetUserInfo"] = GetUserInfo_Process;
            processMap_["InsertUserInfo"] = InsertUserInfo_Process;
            processMap_["InsertUserInfo2"] = InsertUserInfo2_Process;
            processMap_["GetUserInfoTest"] = GetUserInfoTest_Process;
            processMap_["GetUserInfoTest2"] = GetUserInfoTest2_Process;
        }

        protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
        private Iface iface_;
        protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

        public bool Process(TProtocol iprot, TProtocol oprot)
        {
            try
            {
                TMessage msg = iprot.ReadMessageBegin();
                ProcessFunction fn;
                processMap_.TryGetValue(msg.Name, out fn);
                if (fn == null)
                {
                    TProtocolUtil.Skip(iprot, TType.Struct);
                    iprot.ReadMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                    oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                    x.Write(oprot);
                    oprot.WriteMessageEnd();
                    oprot.Transport.Flush();
                    return true;
                }
                fn(msg.SeqID, iprot, oprot);
            }
            catch (IOException)
            {
                return false;
            }
            return true;
        }

        public void GetUserInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            GetUserInfo_args args = new GetUserInfo_args();
            args.Read(iprot);
            iprot.ReadMessageEnd();
            GetUserInfo_result result = new GetUserInfo_result();
            result.Success = iface_.GetUserInfo(args.UserId);
            oprot.WriteMessageBegin(new TMessage("GetUserInfo", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

        public void InsertUserInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            InsertUserInfo_args args = new InsertUserInfo_args();
            args.Read(iprot);
            iprot.ReadMessageEnd();
            InsertUserInfo_result result = new InsertUserInfo_result();
            result.Success = iface_.InsertUserInfo(args.UserInfo);
            oprot.WriteMessageBegin(new TMessage("InsertUserInfo", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

        public void InsertUserInfo2_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            InsertUserInfo2_args args = new InsertUserInfo2_args();
            args.Read(iprot);
            iprot.ReadMessageEnd();
            InsertUserInfo2_result result = new InsertUserInfo2_result();
            result.Success = iface_.InsertUserInfo2(args.UserInfo);
            oprot.WriteMessageBegin(new TMessage("InsertUserInfo2", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

        public void GetUserInfoTest_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            GetUserInfoTest_args args = new GetUserInfoTest_args();
            args.Read(iprot);
            iprot.ReadMessageEnd();
            GetUserInfoTest_result result = new GetUserInfoTest_result();
            result.Success = iface_.GetUserInfoTest(args.Num1);
            oprot.WriteMessageBegin(new TMessage("GetUserInfoTest", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

        public void GetUserInfoTest2_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            GetUserInfoTest2_args args = new GetUserInfoTest2_args();
            args.Read(iprot);
            iprot.ReadMessageEnd();
            GetUserInfoTest2_result result = new GetUserInfoTest2_result();
            result.Success = iface_.GetUserInfoTest2(args.UserName);
            oprot.WriteMessageBegin(new TMessage("GetUserInfoTest2", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class GetUserInfo_args : TBase
    {
        private int _userId;

        public int UserId
        {
            get
            {
                return _userId;
            }
            set
            {
                __isset.userId = true;
                this._userId = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool userId;
        }

        public GetUserInfo_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            //iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I32)
                            {
                                UserId = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                //iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            //oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("GetUserInfo_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (__isset.userId)
                {
                    field.Name = "userId";
                    field.Type = TType.I32;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(UserId);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                //oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("GetUserInfo_args(");
            bool __first = true;
            if (__isset.userId)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("UserId: ");
                __sb.Append(UserId);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class GetUserInfo_result : TBase
    {
        private UserInfo _success;

        public UserInfo Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool success;
        }

        public GetUserInfo_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            //iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new UserInfo();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                //iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            //oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("GetUserInfo_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                //oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("GetUserInfo_result(");
            bool __first = true;
            if (Success != null && __isset.success)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Success: ");
                __sb.Append(Success == null ? "<null>" : Success.ToString());
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class InsertUserInfo_args : TBase
    {
        private UserInfo _userInfo;

        public UserInfo UserInfo
        {
            get
            {
                return _userInfo;
            }
            set
            {
                __isset.userInfo = true;
                this._userInfo = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool userInfo;
        }

        public InsertUserInfo_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            //iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                UserInfo = new UserInfo();
                                UserInfo.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                //iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            //oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("InsertUserInfo_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (UserInfo != null && __isset.userInfo)
                {
                    field.Name = "userInfo";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    UserInfo.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                //oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("InsertUserInfo_args(");
            bool __first = true;
            if (UserInfo != null && __isset.userInfo)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("UserInfo: ");
                __sb.Append(UserInfo == null ? "<null>" : UserInfo.ToString());
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class InsertUserInfo_result : TBase
    {
        private bool _success;

        public bool Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool success;
        }

        public InsertUserInfo_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            //iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                //iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            //oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("InsertUserInfo_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                //oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("InsertUserInfo_result(");
            bool __first = true;
            if (__isset.success)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Success: ");
                __sb.Append(Success);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class InsertUserInfo2_args : TBase
    {
        private UserInfo _userInfo;

        public UserInfo UserInfo
        {
            get
            {
                return _userInfo;
            }
            set
            {
                __isset.userInfo = true;
                this._userInfo = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool userInfo;
        }

        public InsertUserInfo2_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            //iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                UserInfo = new UserInfo();
                                UserInfo.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                //iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            //oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("InsertUserInfo2_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (UserInfo != null && __isset.userInfo)
                {
                    field.Name = "userInfo";
                    field.Type = TType.Struct;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    UserInfo.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                //oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("InsertUserInfo2_args(");
            bool __first = true;
            if (UserInfo != null && __isset.userInfo)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("UserInfo: ");
                __sb.Append(UserInfo == null ? "<null>" : UserInfo.ToString());
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class InsertUserInfo2_result : TBase
    {
        private int _success;

        public int Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool success;
        }

        public InsertUserInfo2_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            //iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.I32)
                            {
                                Success = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                //iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            //oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("InsertUserInfo2_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.I32;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Success);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                //oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("InsertUserInfo2_result(");
            bool __first = true;
            if (__isset.success)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Success: ");
                __sb.Append(Success);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class GetUserInfoTest_args : TBase
    {
        private Dictionary<string, string> _num1;

        public Dictionary<string, string> Num1
        {
            get
            {
                return _num1;
            }
            set
            {
                __isset.num1 = true;
                this._num1 = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool num1;
        }

        public GetUserInfoTest_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            //iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Map)
                            {
                                {
                                    Num1 = new Dictionary<string, string>();
                                    TMap _map5 = iprot.ReadMapBegin();
                                    for (int _i6 = 0; _i6 < _map5.Count; ++_i6)
                                    {
                                        string _key7;
                                        string _val8;
                                        _key7 = iprot.ReadString();
                                        _val8 = iprot.ReadString();
                                        Num1[_key7] = _val8;
                                    }
                                    iprot.ReadMapEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                //iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            //oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("GetUserInfoTest_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Num1 != null && __isset.num1)
                {
                    field.Name = "num1";
                    field.Type = TType.Map;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteMapBegin(new TMap(TType.String, TType.String, Num1.Count));
                        foreach (string _iter9 in Num1.Keys)
                        {
                            oprot.WriteString(_iter9);
                            oprot.WriteString(Num1[_iter9]);
                        }
                        oprot.WriteMapEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                //oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("GetUserInfoTest_args(");
            bool __first = true;
            if (Num1 != null && __isset.num1)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Num1: ");
                __sb.Append(Num1);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class GetUserInfoTest_result : TBase
    {
        private List<string> _success;

        public List<string> Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool success;
        }

        public GetUserInfoTest_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            //iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<string>();
                                    TList _list10 = iprot.ReadListBegin();
                                    for (int _i11 = 0; _i11 < _list10.Count; ++_i11)
                                    {
                                        string _elem12;
                                        _elem12 = iprot.ReadString();
                                        Success.Add(_elem12);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                //iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            //oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("GetUserInfoTest_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, Success.Count));
                            foreach (string _iter13 in Success)
                            {
                                oprot.WriteString(_iter13);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                //oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("GetUserInfoTest_result(");
            bool __first = true;
            if (Success != null && __isset.success)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Success: ");
                __sb.Append(Success);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class GetUserInfoTest2_args : TBase
    {
        private string _userName;

        public string UserName
        {
            get
            {
                return _userName;
            }
            set
            {
                __isset.userName = true;
                this._userName = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool userName;
        }

        public GetUserInfoTest2_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            //iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                UserName = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                //iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            //oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("GetUserInfoTest2_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (UserName != null && __isset.userName)
                {
                    field.Name = "userName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(UserName);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                //oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("GetUserInfoTest2_args(");
            bool __first = true;
            if (UserName != null && __isset.userName)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("UserName: ");
                __sb.Append(UserName);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class GetUserInfoTest2_result : TBase
    {
        private List<UserInfo> _success;

        public List<UserInfo> Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool success;
        }

        public GetUserInfoTest2_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            //iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<UserInfo>();
                                    TList _list14 = iprot.ReadListBegin();
                                    for (int _i15 = 0; _i15 < _list14.Count; ++_i15)
                                    {
                                        UserInfo _elem16;
                                        _elem16 = new UserInfo();
                                        _elem16.Read(iprot);
                                        Success.Add(_elem16);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                //iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            //oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("GetUserInfoTest2_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                            foreach (UserInfo _iter17 in Success)
                            {
                                _iter17.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                //oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("GetUserInfoTest2_result(");
            bool __first = true;
            if (Success != null && __isset.success)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Success: ");
                __sb.Append(Success);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }

}
