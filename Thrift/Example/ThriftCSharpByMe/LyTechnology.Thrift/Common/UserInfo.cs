/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class UserInfo : TBase
{
  private int _UserId;
  private string _UserName;
  private string _Address;
  private Dictionary<string, string> _Phone;
  private string _remark;

  public int UserId
  {
    get
    {
      return _UserId;
    }
    set
    {
      __isset.UserId = true;
      this._UserId = value;
    }
  }

  public string UserName
  {
    get
    {
      return _UserName;
    }
    set
    {
      __isset.UserName = true;
      this._UserName = value;
    }
  }

  public string Address
  {
    get
    {
      return _Address;
    }
    set
    {
      __isset.Address = true;
      this._Address = value;
    }
  }

  public Dictionary<string, string> Phone
  {
    get
    {
      return _Phone;
    }
    set
    {
      __isset.Phone = true;
      this._Phone = value;
    }
  }

  public string Remark
  {
    get
    {
      return _remark;
    }
    set
    {
      __isset.remark = true;
      this._remark = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool UserId;
    public bool UserName;
    public bool Address;
    public bool Phone;
    public bool remark;
  }

  public UserInfo() {
  }

  public void Read (TProtocol iprot)
  {
    //iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              UserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              UserName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Address = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                Phone = new Dictionary<string, string>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  string _key2;
                  string _val3;
                  _key2 = iprot.ReadString();
                  _val3 = iprot.ReadString();
                  Phone[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Remark = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      //iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    //oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("UserInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.UserId) {
        field.Name = "UserId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserId);
        oprot.WriteFieldEnd();
      }
      if (UserName != null && __isset.UserName) {
        field.Name = "UserName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserName);
        oprot.WriteFieldEnd();
      }
      if (Address != null && __isset.Address) {
        field.Name = "Address";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Address);
        oprot.WriteFieldEnd();
      }
      if (Phone != null && __isset.Phone) {
        field.Name = "Phone";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Phone.Count));
          foreach (string _iter4 in Phone.Keys)
          {
            oprot.WriteString(_iter4);
            oprot.WriteString(Phone[_iter4]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Remark != null && __isset.remark) {
        field.Name = "remark";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Remark);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      //oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("UserInfo(");
    bool __first = true;
    if (__isset.UserId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UserId: ");
      __sb.Append(UserId);
    }
    if (UserName != null && __isset.UserName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UserName: ");
      __sb.Append(UserName);
    }
    if (Address != null && __isset.Address) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Address: ");
      __sb.Append(Address);
    }
    if (Phone != null && __isset.Phone) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Phone: ");
      __sb.Append(Phone);
    }
    if (Remark != null && __isset.remark) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Remark: ");
      __sb.Append(Remark);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

